// Table: city
| Field         | Type           |
|---------------|----------------|
| ID            | NUMBER         |
| NAME          | VARCHAR2(17)   |
| COUNTRYCODE   | VARCHAR2(3)    |
| DISTRICT      | VARCHAR2(20)   |
| POPULATION    | NUMBER         |


-- 1. Query all columns (attributes) for every row in the CITY table.
--Solution:
  select * from city;

-- 2. Query all columns for a city in CITY with the ID 1661.
-- solution:
  select * from city
  where ID = 1661;

-- 3. Query all attributes of every Japanese city in the CITY table.
--  The COUNTRYCODE for Japan is JPN.
-- Solution:
  select * from city
  where COUNTRYCODE = 'JPN';

-- 4. Query the names of all the Japanese cities in the CITY table.
--  The COUNTRYCODE for Japan is JPN.
-- Solution:
  select name from city
  where COUNTRYCODE = 'JPN';

-- 5. Query all columns for all American cities in the CITY table with populations larger than 100000. 
--  The CountryCode for America is USA. 
-- Solution:
  select * from city
  where CountryCode = 'USA' 
  and population > 100000;

-- 6. Query the NAME field for all American cities in the CITY table with populations larger than 120000. 
--  The CountryCode for America is USA.
-- Solution:
  select name
  from city
  where CountryCode = 'USA'
  and population >120000;

---------------------------------------------------------------------------------------------------------------
// Table: STATION
| Field   | Type           |
|---------|----------------|
| ID      | NUMBER         |
| CITY    | VARCHAR2(21)   |
| STATE   | VARCHAR2(2)    |
| LAT_N   | NUMBER         |
| LONG_W  | NUMBER         |

-- 1. Query a list of CITY and STATE from the STATION table.
-- Solution:
  select city, state
  from station;

-- 2. Query a list of CITY names from STATION for cities that have an even ID number.
--  Print the results in any order, but exclude duplicates from the answer.
-- Solution:
  select distinct city
  from station
  where ID % 2 =0; 

-- 3. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
-- Solution:
  SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION AS DIFFERENCE;

-- 4. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
--  (i.e.: number of characters in the name). If there is more than one smallest or largest city,
--  choose the one that comes first when ordered alphabetically.
-- Solution:
(select CITY, length(CITY) from station
order by length(CITY), CITY asc limit 1)
UNION
(select CITY, length(CITY) from station
order by length(CITY) desc, CITY asc limit 1);

-- 5. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION.
--  Your result cannot contain duplicates.
-- Solution:
  select distinct city from station
  where city REGEXP '^[a,e,i,o,u]'

  select distinct CITY
  from station
  where city like 'a%'
  or city like 'e%'
  or city like 'i%'
  or city like 'o%'
  or city like 'u%';

-- 6. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. 
--  Your result cannot contain duplicates.
-- Solution:
  select distinct city from station
  where city REGEXP '[a,e,i,o,u]$'

  select distinct CITY
  from station
  where city like '%a'
  or city like '%e'
  or city like '%i'
  or city like '%o'
  or city like '%u';

-- 7. Query the list of CITY names from STATION which have vowels
-- (i.e., a, e, i, o, and u) as both their first and last characters. 
-- Your result cannot contain duplicates.
-- Solution:
  select distinct CITY from station
  where city REGEXP '^[a,e,i,o,u].*[a,e,i,o,u]$'

  select distinct CITY from station
  where (city like 'a%' or city like 'e%' or city like 'i%' or city like 'o%' or city like 'u%)
  and (city like '%a' or city like '%e' or city like '%i' or city like '%o' or city like '%u');

-- 8. Query the list of CITY names from STATION that do not start with vowels.
--  Your result cannot contain duplicates.
-- Solution:
  select distinct CITY
  from station
  where not city REGEXP '^[a,e,i,o,u]';

-- 9. Query the list of CITY names from STATION that do not end with vowels. 
--  Your result cannot contain duplicates.
-- Solution:
  select distinct city from station
  where not city REGEXP '[a,e,i,o,u]$';

-- 10. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. 
--  Your result cannot contain duplicates.
-- Solution:
  select distinct CITY from station
  where not city REGEXP '^[a,e,i,o,u].*[a,e,i,o,u]$';

-- 11. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. 
--  Your result cannot contain duplicates.
-- Solution:
  select  distinct CITY from station
  where not city REGEXP '^[a,e,i,o,u]'
  and not city REGEXP '[a,e,i,o,u]$';
-------------------------------------------------------------------------------------------------------------------------
//Table: STUDENTS

| Column  | Type    |
|---------|---------|
| ID      | INTEGER |
| Name    | STRING  |
| Marks   | INTEGER |

-- 1. Query the Name of any student in STUDENTS who scored higher than  Marks. 
--  Order your output by the last three characters of each name. 
--  If two or more students both have names ending in the same last three characters
--  (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
-- Solution:
  select 
      name
  from students
  where marks > 75
  order by right(name,3) asc, id asc;

---------------------------------------------------------------------------------------------
// Table: EMPLOYEE
| Field            | Type           |
|------------------|----------------|
| employee_ID      | NUMBER         |
| name             | VARCHAR2(21)   |
| months           | NUMBER         |
| salary           | NUMBER         |

-- 1. Write a query that prints a list of employee names (i.e.: the name attribute)
--  from the Employee table in alphabetical order.
-- Solution:
  select name
  from employee
  order by name asc;

-- 2. Write a query that prints a list of employee names (i.e.: the name attribute) 
--  for employees in Employee having salary greater than  per month who have been employees for less than  months.
--  Sort your result by ascending employee_id.
-- Solution:
  select name
  from employee
  where salary >2000 
  and months <10
  order by employee_id asc;

----------------------------------------------------------------------------------------------------------------------------







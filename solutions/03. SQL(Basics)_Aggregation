                                            /* SQL(Basics)_EASY_Aggregation */

// Table: city
| Field         | Type           |
|---------------|----------------|
| ID            | NUMBER         |
| NAME          | VARCHAR2(17)   |
| COUNTRYCODE   | VARCHAR2(3)    |
| DISTRICT      | VARCHAR2(20)   |
| POPULATION    | NUMBER         |

-- 1. Query a count of the number of cities in CITY having a Population larger than 100000
-- Solution:
    select  count(name)
    from city
    where population > 100000;

-- 2. Query the total population of all cities in CITY where District is California.
-- Solution:
    select 
        sum(population)
    from city
    where district = 'California';

-- 3. Query the average population of all cities in CITY where District is California.
-- Solution:
    SELECT avg(population)
    from city
    where district = 'California';

-- 4. Query the average population for all cities in CITY, rounded down to the nearest integer.
-- Solution:
    SELECT round(avg(population),0)
    from city;

-- 5. Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
-- Solution:
    select sum(population)
    from city
    where COUNTRYCODE = 'JPN';

-- 6. Query the difference between the maximum and minimum populations in CITY.
-- Solution:
    select max(population)- min(population)
    from city as difference;
-------------------------------------------------------------------------------------------------------------------------
// Table: EMPLOYEE
| Field            | Type           |
|------------------|----------------|
| employee_ID      | NUMBER         |
| name             | VARCHAR2(21)   |
| months           | NUMBER         |
| salary           | NUMBER         |


-- 1. Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, 
-- but did not realize her keyboard's  key was broken until after completing the calculation. 
-- She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
-- Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
-- Solution:
    SELECT CEIL(AVG(SALARY) - AVG(REPLACE(SALARY, "0", "")))
    FROM EMPLOYEES;

-- 2. We define an employee's total earnings as their monthly salary multiplied by the number of months worked, 
-- and the maximum total earnings as the maximum total earnings for any employee in the Employee table. 
-- Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
-- Then print these values as 2 space-separated integers.
-- Solution:
    select months*salary earning, count(months*salary) 
    from Employee 
    group by earning
    order by earning
    desc limit 1;

---------------------------------------------------------------------------------------------------------------
// Table: STATION
| Field   | Type           |
|---------|----------------|
| ID      | NUMBER         |
| CITY    | VARCHAR2(21)   |
| STATE   | VARCHAR2(2)    |
| LAT_N   | NUMBER         |
| LONG_W  | NUMBER         |


-- 1. Query the following two values from the STATION table:
-- The sum of all values in LAT_N rounded to a scale of  decimal places.
-- The sum of all values in LONG_W rounded to a scale of  decimal places.
-- Solution:
select 
    round(sum(lat_n),2),
    round(sum(long_w),2)
from station;

-- 2. Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880  and less than 137.2345. 
-- Truncate your answer to 4 decimal places.
-- Solution:
    SELECT
        round(sum(lat_n),4)
    from station
    where lat_n > 38.7880 
    and lat_n < 137.2345;

-- 3. Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. 
-- Truncate your answer to 4 decimal places.
-- Solution:
    SELECT round(max(lat_n),4)
    from station
    where lat_n < 137.2345;

-- 4. Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345.
-- Round your answer to 4 decimal places.
-- Solution:
    SELECT round(long_w,4)
    from station
    where lat_n < 137.2345
    order by lat_n desc
    limit 1;

-- 5. Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7880.
-- Round your answer to 4 decimal places.
-- Solution:
    SELECT
        round(min(lat_n),4)
    from station
    where lat_n > 38.7780
    order by lat_n;

-- 6. Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7880.
-- Round your answer to 4 decimal places.
-- Solution:
    SELECT
        round(long_w,4)
    from station
    where lat_n > 38.7780
    order by lat_n
    limit 1;
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
                                    /* SQL(Basics)_Medium_Aggregation */
/*
Consider P1(a,b) and P2(c,d)  to be two points on a 2D plane.
-- a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
-- b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
-- c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
-- d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
*/
--1. Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.

-- Solution:
    SELECT
        round(ABS(min(lat_n)-max(lat_n))+ABS(min(long_w)-max(long_w)),4)
    from station;

-- a = min(lat_n)
-- b = min(long_w)
-- c = max(lat_n)
-- d = max(long_w)
-- p1(a,b)= p1(min(lat_n),min(long_w))
-- p2(c,d) = p2(max(lat_n),max(long_w))
-- Manhattan Distance = |a-c|+|b-d|
--              =|min(lat_n)-max(lat_n)|+ |min(long_w)-max(long_w)|

/*
Consider P1(a,b) and P2(c,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude 
(LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
*/
-- 2. Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.
-- Solution:
    select 
            round(sqrt(
            power(ABS(max(lat_n)-min(lat_n)),2)+
            power(ABS(max(long_w)-min(long_w)),2)),4)
    from station;

-- a = min(lat_n)
-- b = min(long_w)
-- c = max(lat_n)
-- d = max(long_w)
-- p1(a,b)= p1(min(lat_n),min(long_w))
-- p2(c,d) = p2(max(lat_n),max(long_w))
--  Euclidean Distance (p1,p2)^2   = |c-a|^2+|d-b|^2
--   p1,p2  = sqrt(|max(lat_n)- min(lat_n)|^2+ |max(long_w)- min(long_w)|^2)












